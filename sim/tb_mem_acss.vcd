$date
  Sat Feb  6 14:28:05 2021
$end
$version
  GHDL v0
$end
$timescale
  1 fs
$end
$scope module standard $end
$upscope $end
$scope module std_logic_1164 $end
$upscope $end
$scope module numeric_std $end
$upscope $end
$scope module riscv_32i $end
$upscope $end
$scope module helpers $end
$upscope $end
$scope module tb_helpers $end
$upscope $end
$scope module tb_mem_acss $end
$var reg 1 ! clk $end
$var reg 1 " rst $end
$var reg 1 # rw $end
$var reg 1 $ acc_toggle $end
$var reg 32 % inst_in[31:0] $end
$var reg 32 & rs1_in[31:0] $end
$var reg 32 ' rs2_in[31:0] $end
$var reg 2 ( mem_len[1:0] $end
$var reg 32 ) cache_rx[31:0] $end
$var reg 32 * cache_tx[31:0] $end
$var reg 32 + cache_ad[31:0] $end
$var reg 32 , reg_out[31:0] $end
$var reg 1 - tbclock $end
$var reg 1 . tbsimended $end
$scope module dut $end
$var reg 1 / clk $end
$var reg 1 0 rst $end
$var reg 1 1 rw $end
$var reg 1 2 acc_toggle $end
$var reg 32 3 inst_in[31:0] $end
$var reg 32 4 rs1_in[31:0] $end
$var reg 32 5 rs2_in[31:0] $end
$var reg 2 6 mem_len[1:0] $end
$var reg 32 7 cache_rx[31:0] $end
$var reg 32 8 cache_tx[31:0] $end
$var reg 32 9 cache_ad[31:0] $end
$var reg 32 : reg_out[31:0] $end
$var reg 1 ; acc_me $end
$var reg 2 < mem_len_save[1:0] $end
$var reg 1 = load_save $end
$var reg 1 > sign_save $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
0!
0"
0#
0$
b00000000000000000000000000000000 %
b00000000000000000000000000000000 &
b00000000000000000000000000000000 '
b00 (
b00000000000000000000000000000000 )
b00000000000000000000000000000000 *
b00000000000000000000000000000000 +
b00000000000000000000000000000000 ,
0-
0.
0/
00
01
02
b00000000000000000000000000000000 3
b00000000000000000000000000000000 4
b00000000000000000000000000000000 5
b00 6
b00000000000000000000000000000000 7
b00000000000000000000000000000000 8
b00000000000000000000000000000000 9
b00000000000000000000000000000000 :
0;
b00 <
0=
0>
#100000000
1"
10
#200000000
b00000010101001110010101000000011 %
b00000010101001110010101000000011 3
#500000000
1!
1#
b11 (
b00000000000000000000000000101010 +
1-
1/
11
b11 6
b00000000000000000000000000101010 9
1;
b11 <
1=
1>
#1000000000
0!
0-
0/
#1200000000
b11111110000000000000111110100011 %
b00000000000000000000000101000100 '
b00000000000000000000000111110100 )
b11111110000000000000111110100011 3
b00000000000000000000000101000100 5
b00000000000000000000000111110100 7
#1500000000
1!
0#
1$
b00 (
b00000000000000000000000101000100 *
b11111111111111111111110000011111 +
b00000000000000000000000111110100 ,
1-
1/
01
12
b00 6
b00000000000000000000000101000100 8
b11111111111111111111110000011111 9
b00000000000000000000000111110100 :
b00 <
0=
#2000000000
0!
0-
0/
#2200000000
b11111111111100010100000100000011 %
b00000000000000000000000000000010 &
b11111111111100010100000100000011 3
b00000000000000000000000000000010 4
#2500000000
1!
1#
0$
b00000000000000000000000000000001 +
1-
1/
11
02
b00000000000000000000000000000001 9
1=
0>
#3000000000
0!
0-
0/
#3200000000
b00000000000000000001000000000011 %
b11111111001010001111001111111111 )
b00000000000000000001000000000011 3
b11111111001010001111001111111111 7
#3500000000
1!
1$
b01 (
b00000000000000000000000000000010 +
b00000000000000000000000011111111 ,
1-
1/
12
b01 6
b00000000000000000000000000000010 9
b00000000000000000000000011111111 :
b01 <
1>
#4000000000
0!
0-
0/
#4200000000
b00000000000100001001000010100011 %
b11110011111111111111111111111111 )
b00000000000100001001000010100011 3
b11110011111111111111111111111111 7
#4500000000
1!
0#
b00000000000000000000000000100011 +
b11111111111111111111111111111111 ,
1-
1/
01
b00000000000000000000000000100011 9
b11111111111111111111111111111111 :
0=
#5000000000
0!
0-
0/
#5200000000
b00000000000000000010000000100011 %
b00000000000000000010000000100011 3
#5500000000
1!
0$
b11 (
b00000000000000000000000000000010 +
1-
1/
02
b11 6
b00000000000000000000000000000010 9
b11 <
#6000000000
0!
0-
0/
#6200000000
#6500000000
1!
1-
1/
#7000000000
0!
0-
0/
#7200000000
#7500000000
1!
1-
1/
#8000000000
0!
0-
0/
#8200000000
1.
